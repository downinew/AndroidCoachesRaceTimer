package edu.rosehulman.coachesracetimer;

import java.util.HashMap;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.ClipData.Item;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

public class ConvertActivity extends Activity {

	ListView event1;
	ListView event2;
	Object item = null;
	Object item2 = null;
	Button convertButton;
	HashMap<String, Float> convertMap;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_convert);
		event1 = (ListView) findViewById(R.id.listView1);
		event2 = (ListView) findViewById(R.id.listView2);
		convertButton = (Button) findViewById(R.id.convert_button);
		String[] events = getResources().getStringArray(R.array.events);
		createHashMap();
		ArrayAdapter<String> adapter1 = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, events);
		ArrayAdapter<String> adapter2 = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, events);
		event1.setAdapter(adapter1);
		event2.setAdapter(adapter2);

		event1.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				item = parent.getItemAtPosition(position);
			}
		});

		event2.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				item2 = parent.getItemAtPosition(position);
			}
		});

		convertButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				printFunction();

			}
		});

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.main_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		super.onOptionsItemSelected(item);
		int id = item.getItemId();
		switch (id) {
		case R.id.race_timer:
			Intent intent = new Intent(this, MainActivity.class);
			startActivity(intent);
			return true;
		case R.id.dual_timer:
			Intent intent2 = new Intent(this, DualTimerActivity.class);
			startActivity(intent2);
			return true;
		case R.id.convert_events:
			return true;
		case R.id.manage_athletes:
			Intent intent3 = new Intent(this, AthletesView.class);
			startActivity(intent3);
			return true;
		}
		return false;
	}

	public void printFunction() {

		if (item != null && item2 != null) {
			AlertDialog.Builder builder = new Builder(this);
			builder.setTitle("Event Conversion");
			LayoutInflater inflater = this.getLayoutInflater();
			final View convertLayout = inflater.inflate(
					R.layout.convert_dialog, null);
			TextView convertItem1 = (TextView) convertLayout
					.findViewById(R.id.convertItem1);
			TextView convertItem2 = (TextView) convertLayout
					.findViewById(R.id.convertItem2);
			final EditText time1 = (EditText) convertLayout
					.findViewById(R.id.convertTime1);
			final TextView time2 = (TextView) convertLayout
					.findViewById(R.id.convertTime2);

			convertItem1.setText(item.toString());
			convertItem2.setText(item2.toString());
			builder.setView(convertLayout);

			builder.setPositiveButton("Ok",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							// Nothing
						}
					});
			builder.setNegativeButton("Convert",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							Log.e("DEBUG", "Passed edit call");
							String convertTime = time1.getText().toString();
							Log.e("DEBUG", convertTime);
							time2.setText(editTextConversion(convertTime));
							

						}
					});

			builder.create();
			builder.show();
		}
	}

	public void createHashMap() {
		this.convertMap = new HashMap<String, Float>();
		this.convertMap.put("55m", 55F);
		this.convertMap.put("60m", 60F);
		this.convertMap.put("55m hurdles", 55F);
		this.convertMap.put("60m hurdles", 60F);
		this.convertMap.put("100m", 100F);
		this.convertMap.put("100m hurdles", 100F);
		this.convertMap.put("110m hurdles", 110F);
		this.convertMap.put("200m", 200F);
		this.convertMap.put("400m", 400F);
		this.convertMap.put("800m", 800F);
		this.convertMap.put("1000m", 1000F);
		this.convertMap.put("1200m", 1200F);
		this.convertMap.put("1600m", 1600F);
		this.convertMap.put("Mile", 1609F);
		this.convertMap.put("2000m steeplechase", 2000F);
		this.convertMap.put("3000m", 3000F);
		this.convertMap.put("3000m steeplechase", 3000F);
		this.convertMap.put("3200m", 3200F);
		this.convertMap.put("5000m", 5000F);
		this.convertMap.put("6000m", 6000F);
		this.convertMap.put("8000m", 8000F);
		this.convertMap.put("10000m", 10000F);
		this.convertMap.put("15000m", 15000F);
		this.convertMap.put("Half-marathon", 21097F);
		this.convertMap.put("Marathon", 42194F);
	}

	public String editTextConversion(String convertTime) {
		if (convertTime.length() == 12) {
			String milli = convertTime.substring(convertTime.length() - 3,
					convertTime.length());
			Log.e("DEBUG", milli);
			String secs = convertTime.substring(6, 8);
			String mins = convertTime.substring(3, 5);
			String hrs = convertTime.substring(0, 2);
			Log.e("DEBUG", "hrs: " + hrs + " mins: " + mins + " secs: " + secs);
			float distance1 = this.convertMap.get(item.toString());
			float distance2 = this.convertMap.get(item2.toString());
			float deltaDistance = distance1 / distance2;
			Log.e("DEBUG", distance1 +"");
			Log.e("DEBUG", distance2+"");
			Log.e("delta", deltaDistance+"");
			float convertedHrs = Integer.parseInt(hrs) * deltaDistance;
			float convertedMins = Integer.parseInt(mins) * deltaDistance;
			float convertedSecs = Integer.parseInt(secs) * deltaDistance;
			float convertedMilli = Integer.parseInt(milli) * deltaDistance;

			if (convertedMins > 59) {
				convertedMins = convertedMins % 60;
				convertedHrs++;
			}

			if (convertedSecs > 59) {
				convertedSecs = convertedSecs % 60;
				convertedMins++;
			}

			if (convertedMilli > 999) {
				convertedMilli = convertedMilli % 1000;
				convertedSecs++;
			}
			
			Log.e("DEBUG", convertedHrs + ":" + convertedMins + ":" + convertedSecs + "." + convertedMilli);
			return convertedHrs + ":" + convertedMins + ":" + convertedSecs + "." + convertedMilli;
		}
		
		return "00:00:00.000";
	}

}
